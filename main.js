/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianToEpubPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var import_path = require("path");
var DEFAULT_SETTINGS = {
  serverPort: 5002,
  pythonPath: "python",
  autoOpenBrowser: true
};
var ObsidianToEpubPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.serverProcess = null;
    this.serverRunning = false;
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "open-epub-converter",
      name: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043A\u043E\u043D\u0432\u0435\u0440\u0442\u0435\u0440 EPUB",
      callback: () => {
        this.openConverter();
      }
    });
    const ribbonIconEl = this.addRibbonIcon("book", "EPUB Converter", (evt) => {
      this.openConverter();
    });
    this.addSettingTab(new ObsidianToEpubSettingTab(this.app, this));
    console.log("Obsidian to EPUB plugin loaded");
  }
  onunload() {
    this.stopServer();
    console.log("Obsidian to EPUB plugin unloaded");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async openConverter() {
    try {
      if (!this.serverRunning) {
        await this.startServer();
      }
      const vaultPath = this.app.vault.adapter.basePath;
      await this.setVaultPath(vaultPath);
      if (this.settings.autoOpenBrowser) {
        this.openBrowser();
      }
      new import_obsidian.Notice("EPUB \u043A\u043E\u043D\u0432\u0435\u0440\u0442\u0435\u0440 \u043E\u0442\u043A\u0440\u044B\u0442 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435");
    } catch (error) {
      new import_obsidian.Notice(`\u041E\u0448\u0438\u0431\u043A\u0430: ${error.message}`);
      console.error("Error opening converter:", error);
    }
  }
  async startServer() {
    return new Promise((resolve, reject) => {
      var _a, _b;
      try {
        const serverScript = (0, import_path.join)(__dirname, "server", "app.py");
        this.serverProcess = (0, import_child_process.spawn)(this.settings.pythonPath, [serverScript], {
          cwd: (0, import_path.join)(__dirname, "server"),
          env: { ...process.env, PYTHONPATH: (0, import_path.join)(__dirname, "server") }
        });
        (_a = this.serverProcess.stdout) == null ? void 0 : _a.on("data", (data) => {
          console.log(`Server output: ${data}`);
          if (data.toString().includes("Running on")) {
            this.serverRunning = true;
            resolve();
          }
        });
        (_b = this.serverProcess.stderr) == null ? void 0 : _b.on("data", (data) => {
          console.error(`Server error: ${data}`);
        });
        this.serverProcess.on("close", (code) => {
          console.log(`Server process exited with code ${code}`);
          this.serverRunning = false;
          this.serverProcess = null;
        });
        setTimeout(() => {
          if (!this.serverRunning) {
            reject(new Error("\u0421\u0435\u0440\u0432\u0435\u0440 \u043D\u0435 \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u043B\u0441\u044F \u0432 \u0442\u0435\u0447\u0435\u043D\u0438\u0435 10 \u0441\u0435\u043A\u0443\u043D\u0434"));
          }
        }, 1e4);
      } catch (error) {
        reject(error);
      }
    });
  }
  stopServer() {
    if (this.serverProcess) {
      this.serverProcess.kill();
      this.serverProcess = null;
      this.serverRunning = false;
    }
  }
  async setVaultPath(vaultPath) {
    try {
      const response = await fetch(`http://localhost:${this.settings.serverPort}/api/set-project`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          path: vaultPath,
          name: this.app.vault.getName()
        })
      });
      if (!response.ok) {
        throw new Error("\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u043F\u0443\u0442\u044C \u043A vault");
      }
    } catch (error) {
      console.error("Error setting vault path:", error);
      throw error;
    }
  }
  openBrowser() {
    const url = `http://localhost:${this.settings.serverPort}`;
    const { exec } = require("child_process");
    let command;
    if (process.platform === "darwin") {
      command = `open "${url}"`;
    } else if (process.platform === "win32") {
      command = `start "${url}"`;
    } else {
      command = `xdg-open "${url}"`;
    }
    exec(command, (error) => {
      if (error) {
        console.error("Error opening browser:", error);
        new import_obsidian.Notice(`\u041E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u043F\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043F\u043E \u0430\u0434\u0440\u0435\u0441\u0443: ${url}`);
      }
    });
  }
};
var ObsidianToEpubSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438 Obsidian to EPUB" });
    new import_obsidian.Setting(containerEl).setName("\u041F\u043E\u0440\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430").setDesc("\u041F\u043E\u0440\u0442 \u0434\u043B\u044F \u0437\u0430\u043F\u0443\u0441\u043A\u0430 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430").addText((text) => text.setPlaceholder("5002").setValue(this.plugin.settings.serverPort.toString()).onChange(async (value) => {
      this.plugin.settings.serverPort = parseInt(value) || 5002;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u041F\u0443\u0442\u044C \u043A Python").setDesc("\u041A\u043E\u043C\u0430\u043D\u0434\u0430 \u0434\u043B\u044F \u0437\u0430\u043F\u0443\u0441\u043A\u0430 Python (python, python3, \u0438\u043B\u0438 \u043F\u043E\u043B\u043D\u044B\u0439 \u043F\u0443\u0442\u044C)").addText((text) => text.setPlaceholder("python").setValue(this.plugin.settings.pythonPath).onChange(async (value) => {
      this.plugin.settings.pythonPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u0410\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438 \u043E\u0442\u043A\u0440\u044B\u0432\u0430\u0442\u044C \u0431\u0440\u0430\u0443\u0437\u0435\u0440").setDesc("\u041E\u0442\u043A\u0440\u044B\u0432\u0430\u0442\u044C \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u043F\u0440\u0438 \u0437\u0430\u043F\u0443\u0441\u043A\u0435 \u043A\u043E\u043D\u0432\u0435\u0440\u0442\u0435\u0440\u0430").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoOpenBrowser).onChange(async (value) => {
      this.plugin.settings.autoOpenBrowser = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u0421\u0442\u0430\u0442\u0443\u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430").setDesc(this.plugin.serverRunning ? "\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043F\u0443\u0449\u0435\u043D" : "\u0421\u0435\u0440\u0432\u0435\u0440 \u043E\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D").addButton((button) => button.setButtonText(this.plugin.serverRunning ? "\u041E\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C" : "\u0417\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C").onClick(async () => {
      if (this.plugin.serverRunning) {
        this.plugin.stopServer();
        new import_obsidian.Notice("\u0421\u0435\u0440\u0432\u0435\u0440 \u043E\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D");
      } else {
        try {
          await this.plugin.startServer();
          new import_obsidian.Notice("\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043F\u0443\u0449\u0435\u043D");
        } catch (error) {
          new import_obsidian.Notice(`\u041E\u0448\u0438\u0431\u043A\u0430 \u0437\u0430\u043F\u0443\u0441\u043A\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: ${error.message}`);
        }
      }
      this.display();
    }));
  }
};
